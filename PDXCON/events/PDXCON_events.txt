# Events for PDXCON

	#50 - Paradox Interactive Lobby
	#100 - Paradox Hall of Released Titles
	#200 - Paradox Theater
	#300 - Paradox Stellaris Lounge
	#400 - Paradox Office
	#500 - Paradox Map Room
	#600 - Paradox Hall of Staff
	#700 - Paradox Speakeasy
	#800 - Paradox Music Studio
	#900 - Paradox Workspace
	#1000 - Leaving Paradox Interactive
	#1100 - Synthetic Dawn Paradox
	#1200 - Synthetic Dusted / R.I.P. Troy
	#1300 - A Custodian Cleans Things Up!
	#1400 - Synthetic Dawn III

# Commenting code is a best practice, both for anyone who comes after you to look at the code and to remind yourself if you return to it.

# By Stephen "Sparc" Arthur, Lead Developer for Princes of Darkness Mod

namespace = PDXCON

# Be sure to have a unique namespace at the top of your event file. For this event chain I use 'namespace=PDXCON'

# The event script can be found at /events/PDXCON_events.txt Localization for events can be anywhere under /localization/english/ , but I like to organize things into separate folders as much as possible. Since there is only one event chain in the mod I'm using /localization/english/events/PDXCON_events_l_english.yml

# The suffix of '_l_english.yml' is very important. Failure to use this suffix will cause the localization to not be displayed. Save the file with UTF-8-BOM encoding.

# It is also a best practice for modders to use a prefix for all their unique files to reduce conflicts if players combine mods.

# First Event after Visit Paradox Decision

PDXCON.50 = {
	type = character_event
	title = PDXCON.50.t  #Paradox Interactive Lobby
	
# This first event makes use of a 'triggered_desc' based on a trigger that checks if a character has a flag.
	
	desc = {
		desc = PDXCON.50.desc
		triggered_desc = {
			trigger = {
				NOT = { has_character_flag = had_PDXCON_50_met_troy_flag }
			}
			desc = PDXCON.50.desc.meet_troy
		}
	}
	theme = PDXCON_lobby
	left_portrait = {
		character = scope:PDXCON_lobby_person
		animation = personality_honorable
	}

# In 'immediate' clause, there is also an 'if' statement that checks for a flag and changes the scope of which character appears in the lobby.
	
	immediate = {
		
		play_music_cue = "mx_cue_peace_ensues"
		
		if = {
			limit = {
				NOT = { has_character_flag = had_PDXCON_50_met_troy_flag }
			}
			
			PDXCON_populate_CK3_staff_list_effect = yes
			
			character:easteregg_troy_pruitt = {
				save_scope_as = PDXCON_lobby_person
			}	
		}

		if = {
			limit = {
				has_character_flag = had_PDXCON_50_met_troy_flag
			}
			ROOT = {
				save_scope_as = PDXCON_lobby_person
				add_stress = minor_stress_gain
			}
		}		
	}

# Go to Hall of Released Titles
	
	option = {
		name = PDXCON.50.option.a
		trigger_event = PDXCON.100
	}

# Go to Hall of Staff

	option = {
		name = PDXCON.50.option.b
		trigger_event = PDXCON.600
	}	

# Leave Paradox Interactive

	option = {
		name = PDXCON.50.option.c
		trigger_event = PDXCON.1000
	}	
	
	after = {
	
# To add a tooltip, use the command 'custom_tooltip'. For example: custom_tooltip = PDXCON.50.after.tt 
	
		custom_tooltip = PDXCON.50.after.tt
		if = { 
			limit = {
				NOT = { has_character_flag = had_PDXCON_50_met_troy_flag }
			}
			add_character_flag = had_PDXCON_50_met_troy_flag
		}
	}
				
}


PDXCON.100 = {

# This is simplest sort of event. I have named it 'PDXCON.100'.  It is a best practice to leave gaps in your event numbering in case you want to come back later and insert an event into an existing sequence. You can name events whatever you like, but logical, intuitive event names makes it easier for someone else to understand your code and will help you remember when you revist it.

	type = character_event
	title = PDXCON.100.t #Paradox Hall of Released Titles
	desc = PDXCON.100.desc

# Events have themes. They can be found at /common/event_themes/00_PDXCON_event_themes.txt This sets the icon in the upper left, the sound effect with the event, and calls a background. Event backgrounds are found in /common/event_backgrounds/01_PDXCON_event_backgrounds.txt 

# Event backgounds specify the ambience as well as the location of the background image file, in this case: /gfx/interface/illustrations/event_scenes/PDXCON_hallway_titles.dds"	
	
	theme = PDXCON_hallway_titles

# Go to the theater
	
	option = {
		name = PDXCON.100.option.a
		trigger_event = PDXCON.200
	}

# Go to the lounge

	option = {
		name = PDXCON.100.option.b
		trigger_event = PDXCON.300
	}	

# Go to the office
	
	option = {
		name = PDXCON.100.option.c	
		trigger_event = PDXCON.400
	}			

# Go to the map room
			
	option = {
		name = PDXCON.100.option.d
		play_music_cue = "mx_cue_touching_moment"
		trigger_event = PDXCON.500
	}			

# Return to the lobby

	option = {
		name = PDXCON.100.option.e
		trigger_event = PDXCON.50
	}	

# I use the 'after' block here to provide the 'custom_tooltip'.  That way this tooltip is displayed no matter what option a player chooses.

	after = {
		custom_tooltip = PDXCON.100.after.tt
	}	
}

PDXCON.200 = {
	type = character_event
	title = PDXCON.200.t #Paradox Theater
	desc = {
		desc = PDXCON.200.desc

# I used the 'first_valid' command here to use 'triggered_desc' to change the event description based on 'has_character_flag'. In this case, I allow the same event to be revisited and the description wil change based on the past option decision the player has chosen.		
		
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = PDXCON_200_loved_flag 
				}
				desc = PDXCON.200.desc.pleased
			}
			triggered_desc = {
				trigger = {
					has_character_flag = PDXCON_200_hated_flag
				}
				desc = PDXCON.200.desc.worried
			}			
			desc = PDXCON.200.desc.expectations
		}
	}
	
	theme = PDXCON_theater
	
	left_portrait = {
		character = scope:PDXCON_alex
		animation = personality_honorable
	}
	
	right_portrait = {
		character = scope:PDXCON_henrik
		animation = personality_honorable
	}	
	
	immediate = {	
		play_music_cue = "mx_cue_epic_sacral_moment"
		
		character:easteregg_alexander_oltner = {
			save_scope_as = PDXCON_alex
		}
		
		character:easteregg_henrik_fahraeus = {
			save_scope_as = PDXCON_henrik
		}
	}	

# Shut up and take my money
	
	option = {
		name = PDXCON.200.option.a
		trigger = {
			NOT = { has_trait = PDXCON_paradox }
			NOT = { has_character_flag = PDXCON_200_loved_flag }
			NOT = { has_character_flag = PDXCON_200_hated_flag }
		}

# To remove gold from a character use the command 'remove_short_term_gold'. I reference 'minor_gold_value' which is a variable based on the rank of the character. Scripted values are not required to be used. You can define a numerical value like 'remove_short_term_gold = 30'
		
		remove_short_term_gold = minor_gold_value

# To add a trait use the 'add_trait' command. I have defined the trait in /common/traits/00_PDXCON_traits.txt When adding a trait, be sure to increment the 'index' number by one. If two traits share an index number, the game will only use the values defined in one of them. The primary cause of conflict when combining mods is when two different mods use the same index number for a trait. Trait icons are located at /gfx/interface/icons/traits/ 

# They are in a "dds" format.
			
		add_trait = PDXCON_paradox

# To add martial lifestyle experience, use the command 'add_martial_lifestyle_xp'. I use a variable for the amount, 'miniscule_lifestyle_xp'. The amount of these values are defined in the base game at /common/script_values/00_lifestlye_values.txt
		
		add_martial_lifestyle_xp = miniscule_lifestyle_xp

		add_character_flag = PDXCON_200_loved_flag

# Both options here either remove or add stress to scoped characters. In both cases, the command to add or remove stress is 'add_stress'.  To add stress, use scripted value like 'medium_stress_gain'.  To remove stress, use a scripted value like 'minor_stress_loss'. These values are located in the base game at common/script_values/00_stress_values.txt

		scope:PDXCON_alex = {
			add_stress = minor_stress_loss
		}
		
		scope:PDXCON_henrik = {
			add_stress = minor_stress_loss
		}
		trigger_event = PDXCON.200
	}

# This looks terrible

	option = {
		name = PDXCON.200.option.c
		trigger = {
			NOT = { has_trait = PDXCON_paradox }
			NOT = { has_character_flag = PDXCON_200_loved_flag }
			NOT = { has_character_flag = PDXCON_200_hated_flag }			
		}
		
		add_character_flag = PDXCON_200_hated_flag
		
		if = {
			limit = {
				NOT = { has_trait = cynical }
			}
			if = {
				limit = {
					has_trait = zealous 
				}
				remove_trait = zealous
			}
			add_trait = cynical
		}

		add_trait = PDXCON_paradox
		
		add_martial_lifestyle_xp = miniscule_lifestyle_xp

		scope:PDXCON_alex = {
			add_stress = medium_stress_gain
		}
		
		scope:PDXCON_henrik = {
			add_stress = medium_stress_gain
		}

		trigger_event = PDXCON.200
	}

# Go back to the hallway

	option = {
		name = PDXCON.200.option.b
		trigger_event = PDXCON.100
		#custom_tooltip = PDXCON.200.b.tt
	}	
	after = {
		custom_tooltip = PDXCON.200.after.tt
	}	
}

PDXCON.300 = {
	type = character_event
	title = PDXCON.300.t # Paradox Stellaris Lounge
	desc = PDXCON.300.desc
	theme = PDXCON_lounge
	
# This event uses two instances of the 'random_list' command to define scopes that change the characters displayed as 'left_portrait' and 'right_portrait'. I will show a more elegant way to do this in the Speakeasy event.

# There is more than one way to do something. For example, there are two different localizations used to show names of characters having a conversation. The first, 'PDXCON_lounge_person_a.GetFullName', shows the full name of a character. The second is a combination of 'PDXCON_lounge_person_b.GetName' and 'PDXCON_lounge_person_b.GetHouse.GetName'. 

# In both cases, the first name and house name is displayed, but the second variation when mousing over the house name shows the house in the tool tip rather than the character.
	
	left_portrait = {
		character = scope:PDXCON_lounge_person_a
		animation = personality_honorable
	}
	
	right_portrait = {
		character = scope:PDXCON_lounge_person_b
		animation = personality_idle
	}			
	
	immediate = {
		play_music_cue = "mx_cue_banquet"	
		random_list = {
			10 = {
				character:easteregg_johan_andersson = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}
			
			10 = {
				character:easteregg_charna_frostwhisper = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_magne_skjaeran = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_sean_hughes = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}

			10 = {
				character:easteregg_olof_bjork = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}
			10 = {
				character:easteregg_sara_wendel = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	
			10 = {
				character:easteregg_matthew_clohessy = {
					save_scope_as = PDXCON_lounge_person_a
				}
			}	
			10 = {
				character:easteregg_maximilian_olbers = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}			
			
			10 = {
				character:easteregg_emil_tisander  = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}
			10 = {
				character:easteregg_mathilda_bjarnehed = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}
			
			10 = {
				character:easteregg_flavio_verna = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_joacim_carlberg = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}		

			10 = {
				character:easteregg_paul_depre = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	
			
			10 = {
				character:easteregg_petter_lundh = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_william_riggott = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_artur_kacprzak = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_anton_sorokin = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	
			
			10 = {
				character:easteregg_malin_jonsson = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_jonas_wickerstrom = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}

			10 = {
				character:easteregg_patrick_mauffrey = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}			
			
			10 = {
				character:easteregg_jesse_henning = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_hanna_lohman = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}		

			10 = {
				character:easteregg_bartosz_byczynski = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_peter_johannesson = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_bianca_savazzi = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_nils_wadensten = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_henrik_lohmander = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}		

			10 = {
				character:easteregg_fawn_rowe = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}

			10 = {
				character:easteregg_niall_bird = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_max_collin = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}		

			10 = {
				character:easteregg_wojciech_cywinski = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}	

			10 = {
				character:easteregg_pontus_olofsson = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}

			10 = {
				character:easteregg_sebastian_borg = {
					save_scope_as = PDXCON_lounge_person_a 
				}
			}			
			
		}
		
		random_list = {
			10 = {
				character:easteregg_thomas_johansson = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_lysann_schlegel = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	
			
			10 = {
				character:easteregg_matthew_frary = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_petter_vilberg = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_tobias_bodlund  = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_pernilla_sparrhult  = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	
			
			10 = {
				character:easteregg_linnea_thimren  = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_milla_lankinen = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_jakub_potapczyk = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_ewan_cowhig_croft = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	
			
			10 = {
				character:easteregg_david_horler = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_debbie_lane = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	
			
			10 = {
				character:easteregg_nicholas_meredith = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_anna_johansson = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_anton_leirnes = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_joel_hansson = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_max_weltz = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_arthur_bialecki = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_viktor_stadler = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_rodrigue_delrue = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_daniel_moore = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_joseph_gardener = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_katya_boestad = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_steacy_mcilwham = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_andreas_olsson = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_ismael_serrano = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}	

			10 = {
				character:easteregg_lenaic_riedinger = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_christian_daflos = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_tegan_harris = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}			

			10 = {
				character:easteregg_nikolaos_kaltsogiannis = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}

			10 = {
				character:easteregg_karl_cederslatt = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}
			
			10 = {
				character:easteregg_martin_anward = {
					save_scope_as = PDXCON_lounge_person_b 
				}
			}			
			
			
		}		

	}	

# By imbibing the reflection of the divine we grow closer to The Lord
	
	option = {
		name = PDXCON.300.option.a
		trigger = {
			NOT = { has_character_modifier = PDXCON_paradox_modifier }
		}

# To add a character modifier, use the command 'add_character_modifier'. You can make it temporary by adding a time period like 'months = 1'. The modifier is defined in /common/modifers/00_PDXCON_modifiers.txt

# The localization for PDXCON_paradox_modifier is 'Ate Paradox Green'. It is found at /localization/english/modifiers/PDXCON_modifiers_l_english.yml 

# Icon graphics for modifiers is found at /gfx/interface/icons/modifiers/
		
		add_character_modifier = {
			modifier = PDXCON_paradox_modifier
			months = 1
		}

# To add a secret, the command is 'add_secret' with specifying the 'type' and the 'target'. In this case 'secret_cannibal' and 'root'. Making an entirely new secret is quite a chore and involves editing at least six files.
		
		add_secret = { 
			type = secret_cannibal
			target = root
		}	
		trigger_event = PDXCON.300
	}

# Go back to the hallway

	option = {
		name = PDXCON.300.option.b
		trigger_event = PDXCON.100
	}	
	
	after = {
		custom_tooltip = PDXCON.300.after.tt
	}
				
}

PDXCON.400 = {
	type = character_event
	title = PDXCON.400.t # Paradox Office
	theme = PDXCON_office

	desc = {
		desc = PDXCON.400.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					root = {
						NOT = { has_character_flag = PDXCON_400_pitched_majesty_3_flag }
						NOT = { has_character_flag = PDXCON_400_pitched_sengoku_2_flag }
					}
				}
				desc = PDXCON.400.desc.discussion
			}
			triggered_desc = {
				trigger = {
					root = { has_character_flag = PDXCON_400_pitched_sengoku_2_flag }
				}
				desc = PDXCON.400.discussion.consider_sengoku
			}
			desc = PDXCON.400.discussion.consider_majesty
		}
	}	

	right_portrait = {
	    character = scope:PDXCON_linda
		animation = personality_rational
	}

	left_portrait = {
		character = scope:PDXCON_fred
		animation = personality_bold
	}

	immediate = {
		play_music_cue = "mx_cue_sacredrite"		
		character:easteregg_linda_tiger = {
			save_scope_as = PDXCON_linda
		}
		
		character:easteregg_fredrik_wester = {
			save_scope_as = PDXCON_fred
		}
	
	}	

# Make Majesty III
	
	option = {
		name = PDXCON.400.option.a
		play_music_cue = "mx_cue_faith_conversion"	
		trigger = {
			NOT = { has_faith = faith:pdxcon_paradoxism }
			NOT = { has_character_flag = PDXCON_400_pitched_majesty_3_flag }
		}

# To add an opinion modifier between characters, scope to the character who will have the opinion of the target. We scope to Fredrik Wester who will get a positive opinion of the 'target' character 'root' (the character getting the event). The command is 'add_opinion'. The modifier is 'PDXCON_liked_game_pitch_opinion' which is defined at common/opinion_modifiers/00_PDXCON_opinion_modifiers.txt 

# Opinions list the value of the opinion as 'opinion', such as 'opinion = 5'. A time period can be set, such as 'years = 5'. The opinion can also set to incremently decline over time with 'decaying = yes'.
		
		scope:PDXCON_fred = {
			add_opinion= {
				target = root
				modifier = PDXCON_liked_game_pitch_opinion
			}
		}

# To change a character's faith, use the command 'set_character_faith' in this case, 'set_character_faith = faith:pdxcon_paradoxism'. You can also use faith in triggers, such as 'has_faith = faith:pdxcon_paradoxism'. Do not forget to use 'faith:' when calling a faith. Religion and faith definitions are found at /common/religon/religions/ 

# Faith icons in the '.dds' format are at /gfx/interface/icons/faith/ 

# One quirk is that if you want to make a faith icon also avaiable for a custom faith, you must give it another name like 'pdxcon_paradoxism_custom' listed in the religion file in the 'custom_faith_icons' section.
			
		set_character_faith = faith:pdxcon_paradoxism

		add_secret = { 
			type = secret_non_believer
			target = root
		}		
		
		add_character_flag = PDXCON_400_pitched_majesty_3_flag
		trigger_event = PDXCON.400
	}

# Make Sengoku II

	option = {
		name = PDXCON.400.option.c
		play_music_cue = "mx_cue_faith_conversion"	
		trigger = {
			NOT = { has_faith = faith:pdxcon_paradoxism }
			NOT = { has_character_flag = PDXCON_400_pitched_sengoku_2_flag }
		}
		set_character_faith = faith:pdxcon_paradoxism

		add_secret = { 
			type = secret_non_believer
			target = root
		}		
		
		add_character_flag = PDXCON_400_pitched_sengoku_2_flag	
		trigger_event = PDXCON.400
	}

# Go back to the hallway

	option = {
		name = PDXCON.400.option.b
		trigger_event = PDXCON.100
	}	
	
	after = {
		custom_tooltip = PDXCON.400.after.tt
	}
				
}

PDXCON.500 = {
	type = character_event
	title = PDXCON.500.t # Paradox Map Room
	desc = PDXCON.500.desc
	theme = PDXCON_map_room

# Take the royal platypus skeleton as my sigil
	
	option = {
		name = PDXCON.500.option.a
		trigger = {
			NOT = { has_character_flag = PDXCON_500_adopted_the_royal_platypus_skeleton_sigil }
		}

# Coat of Arms can be copied from one thing to another. Use the command: 

		house = { set_coa = dynasty:PDXCON_paradox_dynasty }
		
# This will change the coat of arms of the player's house to that of the PDXCON_dynasty.Coat of Arms are defined in /common/coat_of_arms/coat_of_arms/

# If you are running CK3 in debug mode, you can edit the coat of arms file in real time and the game will refresh the coat of arms displayed with your changes. This is how I easily edited so many different coat of arms for Princes of Darkness. You can quickly change colors, change the emblem being referenced, change the size(scale), position, rotation and orientaton of the emblem.

# PDXCON_paradox_dynasty = {
#	pattern = "pattern_solid.dds"
#	color1 = "red"
#	color2 = "white"
#
#	colored_emblem = {
#		texture = "ce_PDXCON_paradox_01.dds"
#		color1 = "yellow"
#		color2 = "white"
#		instance = { position = { 0.5 0.6 } scale = { 1.25 1.25 } }		
#	}
#}

# The texture referenced in that file are found in /gfx/coat_of_arms/colored_emblems 	
		
		add_character_flag = PDXCON_500_adopted_the_royal_platypus_skeleton_sigil
		add_secret = { 
			type = secret_incest
			target = root
		}
		custom_tooltip =  PDXCON.500.option.a.tt
		
		trigger_event = PDXCON.500
	}

# Go back to the hallway

	option = {
		name = PDXCON.500.option.b
		trigger_event = PDXCON.100
	}	

	after = {
		custom_tooltip = PDXCON.500.after.tt
	}
				
}

PDXCON.600 = {
	type = character_event
	title = PDXCON.600.t # Paradox Hall of Staff
	desc = PDXCON.600.desc
	theme = PDXCON_hallway_staff
	
	immediate = {
		play_music_cue = "mx_cue_prison"
	}

# Go to the speakeasy
	
	option = {
		name = PDXCON.600.option.a
		trigger_event = PDXCON.700
	}

# Go to the music studio

	option = {
		name = PDXCON.600.option.b
		trigger_event = PDXCON.800
	}	
	
# Go to the workspace	
	option = {
		name = PDXCON.600.option.c
		trigger_event = PDXCON.900
	}				

# Return to the lobby
	option = {
		name = PDXCON.600.option.d
		trigger_event = PDXCON.50
	}	

	after = {
		custom_tooltip = PDXCON.600.after.tt
	}
	
}

# You don't have to always follow Paradox's CK3 conventions or style guide with events. You don't have to include character portraits in events. You don't have to have event background images to be rooms in which a character is standing. You don't have to have event text to be in first person. You can use second-person point of view. You can use the royal 'we'. You can use 'single quotation marks' for dialogue instead of "double quotation marks". Do whatever you like. Be as creative as you want! You are a modder! This is a guide to modding, not a guide to writing great literature and poetry. David Faulkner had a 1,288 word run-on sentence. He is one of the most celebrated authors of American literature. Paradox Interactive highly regards American English which is why they use it in all their games rather than British Imperialist English (which will only be used for Victoria 3). If you change from the standard approach, you may get some complaints. If you decide to change the style in the mod, consistency may be important. Please do not make a 1,288 word run-on sentence in CK3. It would not fit in the event window without a scroll bar.


PDXCON.700 = {
	type = character_event
	title = PDXCON.700.t # Paradox Speakeasy
	desc = {
		desc = PDXCON.700.desc
		triggered_desc = {
			trigger = {
				root = {
					has_trait = drunkard
					has_character_modifier = PDXCON_drunk_modifier
				}
			}
			desc = PDXCON.700.desc.cutoff
		}		
	
	}
	theme = PDXCON_speakeasy
	
	left_portrait = {
		character = scope:PDXCON_speakeasy_person_a
		animation = idle
	}
	
	right_portrait = {
		character = scope:PDXCON_speakeasy_person_b
		animation = happiness
	}


	immediate = {
		play_music_cue = "mx_cue_meadandwine"

# I greatly reduced the size of the random selections in the event code itself through use of a 'list'. This will make use of a scripted effect. One reason to use scripted effects is to isolate code from a specific event, particularly if you plan to reuse the effect more than once. If you don't plan to reuse code, then you might not put the effort into scripting a trigger or effect, but its generally a good practice to do so. Instead of 'random_list' where I list every potential character and then save scope, I use 'random_in_list'.

# The 'list' is 'PDXCON_CK3_staff_list', which is a dynamic variable I set at the start of the event chain in the immediate clause of PDXCON.50 with the command 'PDXCON_populate_CK3_staff_list_effect = yes'. This effect is defined in /common/scripted_effects/PDXCON_staff_effects.txt 
		
		random_in_list = {
			list = PDXCON_CK3_staff_list
			limit = { 
				is_available = yes	
			}
			save_scope_as = PDXCON_speakeasy_person_a
		}

		random_in_list = { 
			list = PDXCON_CK3_staff_list
			limit = {
				is_available = yes		
				NOT = { this = scope:PDXCON_speakeasy_person_a }
			}
			save_scope_as = PDXCON_speakeasy_person_b
		}
	}

# The drinking option uses 'random' to determine an outcome. For example, after a character already has the 'Tipsy at PDXCON' modifier, there is 30% chance with subsequent drinks that the character gains the drunkard trait.

# Have a drink or three
	
	option = {
		name = PDXCON.700.option.a
		trigger = {
			NOT = { has_trait = drunkard }
			gold > 0
		}
		
		add_stress = minor_stress_loss
		root = { remove_short_term_gold = 1 }
 		
		if = {
			limit = {
				has_character_modifier = PDXCON_drunk_modifier
				NOT = { has_trait = drunkard }
			}
			random = {
				chance = 30
				add_trait = drunkard
			}
		}

		if = {
			limit = {
				has_character_modifier = PDXCON_tipsy_modifier
				NOT = { has_character_modifier = PDXCON_drunk_modifier }
			}
			random = {
				chance = 50
				remove_character_modifier = PDXCON_tipsy_modifier
				add_character_modifier = {
					modifier = PDXCON_drunk_modifier
					days = 7
				}
			}
		}
		
		if = {
			limit = {
				NOT = { has_character_modifier = PDXCON_tipsy_modifier }
				NOT = { has_character_modifier = PDXCON_drunk_modifier }
			}
			random = {
				chance = 75
				add_character_modifier = {
					modifier = PDXCON_tipsy_modifier
					days = 7
				}
			}
		}
		trigger_event = PDXCON.700
	}

# Go back to the hallway

	option = {
		name = PDXCON.700.option.b
		trigger_event = PDXCON.600
	}	

	after = {
		custom_tooltip = PDXCON.700.after.tt
	}
	
}

PDXCON.800 = {
	type = character_event
	title = PDXCON.800.t # Paradox Music Studio
	desc = PDXCON.800.desc
	theme = PDXCON_music_studio
	
	immediate = {
	
# I have used music cues throughout the mod's events. Music cues can be found at /music/music.txt. The syntax is simple, for example:
	
		play_music_cue = "main_theme_track"
		
	}

# Grab the lyrics sheet.
	
	option = {
		name = PDXCON.800.option.a
		trigger = {
			NOT = { has_character_flag = PDXCON_800_took_lyrics_sheet }
		}
		add_character_flag = PDXCON_800_took_lyrics_sheet
		
# Adding to an attribute skill is easy, for example:		
		add_diplomacy_skill = 1
		if = {
			limit = {
				NOT = { has_trait = poet }
			}
			random = {
				chance = 30
				add_trait = poet
			}
		}
		trigger_event = PDXCON.800
	}

# Go back to the hallway

	option = {
		name = PDXCON.800.option.b
		trigger_event = PDXCON.600
	}	

	after = {
		custom_tooltip = PDXCON.800.after.tt
	}
}

PDXCON.900 = {
	type = character_event
	title = PDXCON.900.t # Paradox Workspace
	
# To check out some of the options for changing colors and fonts, see the localization for the event: 'PDXCON.900.desc'	
	
	desc = PDXCON.900.desc
	theme = PDXCON_workspace

# DummyMale is an inside joke that future modders will not need to worry about. According to PDX: 'a number of mods use the DummyMale and DummyFemale characters for a lot of things they weren’t meant for. This was a result of lacking functionality, which we have now introduced in 1.3.X. With the need for this dummy-character removed, we will be deprecating it. That means that it’ll continue to work 1.3.X which introduces the replacement functionality, but that they will be largely removed in 1.4 to ensure that script and code are more maintainable in the long-term.'

# A character was added via the history files. You can find the entry in /history/characters/PDXCON_characters.txt as 'PDXCON_maledummy'. You can scope to any character with 'character:' for example:
	
	right_portrait = {
		character = scope:PDXCON_maledummy
		animation = severelywounded
	}
	
	immediate = {
		play_music_cue = "mx_cue_prison"
	
		character:PDXCON_maledummy = {
			save_scope_as = PDXCON_maledummy
		}
	}

# Take some notes to improve your modding
	
	option = {
		name = PDXCON.900.option.a
		trigger = {
			NOT = { has_character_flag = PDXCON_900_took_notes }
		}
		add_learning_skill = 1
		add_character_flag = PDXCON_900_took_notes 
		trigger_event = PDXCON.900
	}

# Go back to the hallway

	option = {
		name = PDXCON.900.option.b
		trigger_event = PDXCON.600
	}	

	after = {
		custom_tooltip = PDXCON.900.after.tt
	}
}

# Giving a character a crown

PDXCON.1000 = {
	type = character_event
	title = PDXCON.1000.t # Leaving Paradox Interactive
	desc = PDXCON.1000.desc
	theme = PDXCON_lobby

	left_portrait = {
		character = root
		#animation = war_over_win
		animation = scheme
	}
	
	right_portrait = {
		character = scope:PDXCON_hat_bringer
		animation = beg
	}

	immediate = {
		play_music_cue = "mx_cue_succession_instrumental"
	
		character:easteregg_troy_pruitt = {
			save_scope_as = PDXCON_hat_bringer
		}
		
# I have used a character flag to priortize the paradox crown to be displayed on the character's portrait:
		
		add_character_flag = PDXCON_wearing_paradox_crown_flag
	}

# The flag is checked by a trigger in scripted triggers: /common/scripted_triggers/PDXCON_clothing_triggers.txt 

# PDXCON_crown_trigger = {
# has_character_flag = PDXCON_wearing_paradox_crown_flag
# }

# Addding 3D portrait models like this crown involves several files: 
# /common/genes/06_genes_special_accessories_headgear.txt
# /gfx/portraits/portrait_modifiers/01_headgear.txt
# /gfx/portraits/portrait_modifiers/01_custom_headgear.txt
#/gfx/portraits/accessories/PDXCON_headgear.txt
# And all the model files under this folder: # /gfx/models/portraits/attachments/male_headgears/secular/western/pdxcon_sample_01/
# As well as the coresponding folder for 'female_headgears'

# We shall take our leave

	option = {
		name = PDXCON.1000.option.a
		trigger_event = PDXCON.1100
	}

	after = {
		custom_tooltip = PDXCON.1000.after.tt
	}
}

PDXCON.1100 = {
	type = character_event
	title = PDXCON.1100.t # Synthetic Dawn Paradox
	desc = PDXCON.1100.desc
	theme = PDXCON_mars

# Similar to adding a crown, the tommy gun was added as model. However, it is displayed by copying and modifying the spymaster animation and swapping the knife for the new tommy gun model. This is found in the following file: /gfx/portraits/portrait_animations/PDXCON_animations.txt
# portrait_modifier = { 
#	animations_props = PDXCON_tommy_gun_prop 
#	animations = council_spymaster_decal
# }

	left_portrait = {
		character = scope:PDXCON_synthetic_assassin
		animation = PDXCON_tommygun_wielder
	}
	
	lower_right_portrait = {
		character = scope:PDXCON_hat_bringer
		animation = rage
	}

	immediate = {
		play_music_cue = "mx_cue_combat_3"
	
		hidden_effect = {
			character:synthetic_leader = {
				save_scope_as = PDXCON_synth_leader
			}

# The synthetic character is spawned with the 'create_character' command. All the relevant character details like attributes and traits are included inside the code block of 'create_character'.
		
			create_character = {
				name = "HK-74"
				location = root.capital_province
				culture = capital_province.culture
				faith = faith:pdxcon_syntheticism
				gender = male
				mother = scope:PDXCON_synth_leader
				dynasty_house = scope:PDXCON_synth_leader.house
				age = {18 900}
				diplomacy = { 2 8 }
				martial = { 3 4 }
				stewardship = { 1 5 }
				intrigue = { 1 3 }
				learning = { 1 5 }
				prowess = { 5 7 }	
				trait = cynical
				trait = callous
				trait = diligent
				trait = education_intrigue_4
				trait = PDXCON_synthetic
				save_scope_as = PDXCON_synthetic_assassin
			}
					
			scope:PDXCON_synthetic_assassin = {
				add_trait = PDXCON_synthetic
				add_character_modifier = {
					modifier = PDXCON_has_tommygun_modifier
				}
			}		
		}
	}

# Help Troy fight the Synthetic

	option = {
		name = PDXCON.1100.option.a

# Chosing to help Troy fight creates a prowess attribute duel:

		duel = {
			skill = prowess
			value = scope:PDXCON_synthetic_assassin.prowess
			desc = PDXCON.1100.option.a.desc
			
			50 = {
				desc = PDXCON.1100.option.a.success

				compare_modifier = {
					value = scope:duel_value
					multiplier = high_positive_duel_skill_multiplier
				}
				scope:PDXCON_synthetic_assassin = {
					death = {
						death_reason = death_duel
					}
				}				
				hidden_effect = {	
					save_scope_value_as = {
						name = PDXCON_synth_fight
						value = flag:player_won
					}
				}	
			}
			
			50 = {
				desc = PDXCON.1100.option.a.failure

				compare_modifier = {
					value = scope:duel_value
					multiplier = low_negative_duel_skill_multiplier 
				}

				hidden_effect = {
					save_scope_value_as = {
						name = PDXCON_synth_fight
						value = flag:troy_killed
					}	
				}
				
				scope:PDXCON_hat_bringer = {
					death = {
						death_reason = death_duel
					}
				}
				scope:PDXCON_synthetic_assassin = {
					death = {
						death_reason = death_duel
					}
				}				
			}			
		}
		trigger_event = {
			id = PDXCON.1200
		}		
	}		

# Flee, abandoning Troy to his fate.

	option = {
		name = PDXCON.1100.option.b
		random_list = {
			99 = { 
				scope:PDXCON_hat_bringer = {
					death = {
						death_reason = death_duel
					}
				}
				save_scope_value_as = {
					name = PDXCON_synth_fight
					value = flag:troy_killed
				}
			}
			1 = { 
				scope:PDXCON_synthetic_assassin = {
					death = {
						death_reason = death_duel
					}
				}
				save_scope_value_as = {
					name = PDXCON_synth_fight
					value = flag:troy_won
				}
			}
		}
		trigger_event = {
			id = PDXCON.1200
		}	
	}

	after = {
		custom_tooltip = PDXCON.1100.after.tt
	}
	
}

PDXCON.1200 = {
	type = character_event

# I use a triggered description to change the title of the event depending on whether Troy was killed by the synthetic or not.
	
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:PDXCON_synth_fight = flag:troy_killed
				}
				desc = PDXCON.1200.t.dead_troy # R.I.P. Troy
			}
			desc = PDXCON.1200.t.dead_synth # Synthetic Dusted
		}
	}

	desc = {
		triggered_desc = {
			trigger = {
				scope:PDXCON_synth_fight = flag:troy_killed
			}
			desc = PDXCON.1200.desc.dead_troy
		}
		desc = PDXCON.1200.desc.victory
		desc = PDXCON.1200.desc.pewpew
	}
	theme = PDXCON_lobby

	left_portrait = {
		character = root
		animation = PDXCON_tommygun_wielder
	}

	immediate = {
	
		play_music_cue = "mx_cue_death"
		
		hidden_effect = {
			add_character_modifier = {
				modifier = PDXCON_has_tommygun_modifier
			}
			set_global_variable = {
				name = PDXCON_1200_happened
				value = yes
			}
		}
	}

# What are these creatures? What do they want?
	
	option = {
		name = PDXCON.1200.option.a
		
# Adding prestige is easy, it is just:
		
		add_prestige = 1000
		
		trigger_event = PDXCON.1300
	}	
	
	after = {
		custom_tooltip = PDXCON.1200.after.tt
	}
}
	
PDXCON.1300 = {
	type = character_event
	title = PDXCON.1300.t # A Custodian Cleans Things Up!
	desc = PDXCON.1300.desc
	theme = PDXCON_theater

	left_portrait = {
		character = root
		animation = PDXCON_tommygun_wielder
	}
	
	right_portrait = {
		character = scope:PDXCON_fred
		animation = flirtation
	}	

	lower_left_portrait = {
		character = scope:PDXCON_supporter_person_a
		animation = personality_vengeful
	}

	lower_center_portrait = {
		character = scope:PDXCON_supporter_person_b
		animation = anger
	}
	
	lower_right_portrait = {
		character = scope:PDXCON_supporter_person_c
		animation = personality_honorable
	}	
	
	immediate = {

		play_music_cue = "main_theme_track"

		character:easteregg_fredrik_wester = {
			save_scope_as = PDXCON_fred
		}

		random_in_list = {
			list = PDXCON_CK3_staff_list
			limit = { 
				is_available = yes	
				NOT = { this = scope:PDXCON_fred }
			}
			save_scope_as = PDXCON_supporter_person_a
		}

		random_in_list = { 
			list = PDXCON_CK3_staff_list
			limit = {
				is_available = yes	
				OR = {
					NOT = { this = scope:PDXCON_supporter_person_a }
					NOT = { this = scope:PDXCON_fred }
				}
			}
			save_scope_as = PDXCON_supporter_person_b
		}

# There is an 'if' and "else" statement that checks if Troy's character 'is_alive'. If Troy's character is alive, his portrait will be in the lower right during the selection of the Gamer Custodian, so thats nice!

		if = {
			limit = {
				character:easteregg_troy_pruitt = { is_alive = no }
			}		
			random_in_list = { 
				list = PDXCON_CK3_staff_list
				limit = {
					is_available = yes		
					OR = {
						NOT = { this = scope:PDXCON_supporter_person_a }
						NOT = { this = scope:PDXCON_supporter_person_b }
						NOT = { this = scope:PDXCON_fred }
					}
				}
				save_scope_as = PDXCON_supporter_person_c
			}
		}
		else = {
			character:easteregg_troy_pruitt = {
				save_scope_as = PDXCON_supporter_person_c
			}	
		}

# To add titles and vassals to a character:

		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}

# King of Sweden		
		title:k_sweden = { 
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}
		
		title:d_svealand = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		} 
		
		title:c_upland = {
			change_title_holder = {
				holder = root
				change = scope:change
				take_baronies = yes
			}
		}
		
		title:c_sodermannaland = {
			change_title_holder = {
				holder = root
				change = scope:change
				take_baronies = yes
			}
		}	
		
		title:c_dalarna = {
			change_title_holder = {
				holder = root
				change = scope:change
				take_baronies = yes
			}
		}	
		
		title:c_vastmanland = {
			change_title_holder = {
				holder = root
				change = scope:change
				take_baronies = yes
			}
		}	

		title:c_dalabergslagen= {
			change_title_holder = {
				holder = root
				change = scope:change
				take_baronies = yes
			}
		}	
		
		resolve_title_and_vassal_change = scope:change
		
		spawn_army = {
			uses_supply = yes
			inheritable = no
			name = swedish_armed_forces_event_troops
			levies = {
				value = 50000
			}
			men_at_arms = {
				type = bondi
				stacks = 3
			}
			men_at_arms = {
				type = vigmen
				stacks = 2
			}
			
			location = title:c_upland.title_province
		}
	}

# Now we can get things done.

	option = {
		name = PDXCON.1300.option.a
		add_prestige = 4000		
		trigger_event = PDXCON.1400
	}

	after = {	
		custom_tooltip = PDXCON.1300.after.tt
	}

}

PDXCON.1400 = {
	type = character_event
	title = PDXCON.1400.t # Synthetic Dawn III
	desc = PDXCON.1400.desc
	theme = PDXCON_mars

	left_portrait = {
		character = scope:PDXCON_synth_leader
		animation = personality_bold
		#war_attacker
	}
	
	right_portrait = {
		character = scope:PDXCON_synthetic_sublord_a
		animation = war_attacker
	}	

	lower_left_portrait = {
		character = scope:PDXCON_synthetic_sublord_b
		animation = war_attacker
	}

	
	lower_right_portrait = {
		character = scope:PDXCON_synthetic_sublord_c
		animation = war_attacker
	}

	immediate = {

		play_music_cue = "mx_cue_crusade_starts"		
		
		hidden_effect = {				
		
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change_synth
				add_claim_on_loss = no
			}
			
			title:e_contingency = {
				change_title_holder = {
					holder = scope:PDXCON_synth_leader
					change = scope:change_synth
				}
			}	
			
			title:c_middlesex = {
				change_title_holder = {
					holder = scope:PDXCON_synth_leader
					change = scope:change_synth
					take_baronies = yes
				}
			}
			
			resolve_title_and_vassal_change = scope:change_synth
			
			scope:PDXCON_synth_leader = { 
			
# To add a pressed claim:			
				add_pressed_claim = title:k_sweden
				add_pressed_claim = title:k_england
				add_pressed_claim = title:d_bedford
				add_pressed_claim = title:d_svealand
				add_pressed_claim = title:c_upland
				add_prestige = 5000
			}
		}
		
		scope:PDXCON_synth_leader = { 
			spawn_army = {
				uses_supply = yes
				inheritable = no
				name = sterlization_army_01_event_troops
				levies = {
					value = 100000
				}
				men_at_arms = {
					type = bombard
					stacks = 1
				}
				men_at_arms = {
					type = house_guard
					stacks = 1
				}	
				
				location = title:c_middlesex.title_province
			}			
		}

# Rather than defining all the traits and attributes of a character in the 'create_character' commmand, I use a template. 'template = PDXCON_synthetic_template'. Templates are located at /common/scripted_character_templates/00_PDXCON_synthetic_character_templates.txt
		
		hidden_effect = {
			create_character = {
				name = "GAMAS_H3"
				mother = scope:PDXCON_synth_leader
				dynasty_house = scope:PDXCON_synth_leader.house
				location = scope:PDXCON_synth_leader.capital_province
				culture = scope:PDXCON_synth_leader.culture					
				template = PDXCON_synthetic_template
				save_scope_as = PDXCON_synthetic_sublord_a
			}
					
			scope:PDXCON_synthetic_sublord_a = {
				add_character_modifier = {
					modifier = PDXCON_has_tommygun_modifier
				}
				set_immortal_age = 21
					
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change_synth_a
					add_claim_on_loss = no
				}
				
				title:c_ile_de_france = {
						change_title_holder = {
							holder = scope:PDXCON_synthetic_sublord_a
							change = scope:change_synth_a
							take_baronies = yes
						}
					}
				
				resolve_title_and_vassal_change = scope:change_synth_a
				add_pressed_claim = title:d_valois
				add_pressed_claim = title:k_france
				add_prestige = 1000	
			}
		}
			
		scope:PDXCON_synthetic_sublord_a = {
			spawn_army = {
				uses_supply = yes
				inheritable = no
				name = sterlization_army_02_event_troops
				levies = {
					value = 100000
				}
				men_at_arms = {
					type = bombard
					stacks = 1
				}
				men_at_arms = {
					type = house_guard
					stacks = 1
				}				
				location = title:c_ile_de_france.title_province
			}				
		}	

		hidden_effect = {
		
			create_character = {
				name = "AK_H_22"
				mother = scope:PDXCON_synth_leader
				dynasty_house = scope:PDXCON_synth_leader.house
				location = scope:PDXCON_synth_leader.capital_province
				culture = scope:PDXCON_synth_leader.culture				
				template = PDXCON_synthetic_template
				
				save_scope_as = PDXCON_synthetic_sublord_b
			}
					
			scope:PDXCON_synthetic_sublord_b = {
				add_character_modifier = {
					modifier = PDXCON_has_tommygun_modifier
				}
				set_immortal_age = 21
				
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change_synth_b
					add_claim_on_loss = no
				}
			
				title:c_berlin = {
					change_title_holder = {
						holder = scope:PDXCON_synthetic_sublord_b
						change = scope:change_synth_b
						take_baronies = yes
					}
				}
				
				resolve_title_and_vassal_change = scope:change_synth_b
				add_pressed_claim = title:d_ostmark
				add_prestige = 1000	
			}
		}
				
		scope:PDXCON_synthetic_sublord_b = {
			spawn_army = {
				uses_supply = yes
				inheritable = no
				name = sterlization_army_03_event_troops
				levies = {
					value = 100000
				}
				men_at_arms = {
					type = bombard
					stacks = 1
				}
				men_at_arms = {
					type = house_guard
					stacks = 1
				}				
				location = title:c_berlin.title_province
			}				
		}	
		
		hidden_effect = {
			create_character = {
				name = "PMB_3"
				mother = scope:PDXCON_synth_leader
				dynasty_house = scope:PDXCON_synth_leader.house
				location = scope:PDXCON_synth_leader.capital_province
				culture = scope:PDXCON_synth_leader.culture					
				template = PDXCON_synthetic_template
				save_scope_as = PDXCON_synthetic_sublord_c
			}
					
			scope:PDXCON_synthetic_sublord_c = {
				add_character_modifier = {
					modifier = PDXCON_has_tommygun_modifier
				}
				set_immortal_age = 21
				
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change_synth_c
					add_claim_on_loss = no
				}
			
				title:c_moskva = {
					change_title_holder = {
						holder = scope:PDXCON_synthetic_sublord_c
						change = scope:change_synth_c
						take_baronies = yes
					}
				}
				
				resolve_title_and_vassal_change = scope:change_synth_c
				add_pressed_claim = title:d_opolye
				add_pressed_claim = title:k_opolye
				add_prestige = 1000	
			}
		}
					
			scope:PDXCON_synthetic_sublord_c = {		
				spawn_army = {
					uses_supply = yes
					inheritable = no
					name = sterlization_army_04_event_troops
					levies = {
						value = 100000
					}
					men_at_arms = {
						type = bombard
						stacks = 1
					}
					men_at_arms = {
						type = house_guard
						stacks = 1
					}				
					location = title:c_moskva.title_province
				}				
			}				

		create_title_and_vassal_change = {
			type = created
			save_scope_as = change_synth_d
			add_claim_on_loss = no
		}

		scope:PDXCON_synthetic_sublord_a = {
			change_liege = {
				liege = scope:PDXCON_synth_leader
				change = scope:change_synth_d
			}
		}	

		scope:PDXCON_synthetic_sublord_b = {
			change_liege = {
				liege = scope:PDXCON_synth_leader
				change = scope:change_synth_d
			}
		}

		scope:PDXCON_synthetic_sublord_c = {
			change_liege = {
				liege = scope:PDXCON_synth_leader
				change = scope:change_synth_d
			}
		}
		
		resolve_title_and_vassal_change = scope:change_synth_d
	}

# Gamers playing mods: unite against these Iron Men!

	option = {
		name = PDXCON.1400.option.a
		add_prestige = 4000
		scope:PDXCON_synth_leader = {
		
# To start a war:		
			start_war = {
				casus_belli = claim_cb
				target = title:k_sweden.holder
				claimant = scope:PDXCON_synth_leader
			}
		}
	}

	after = {	
		set_global_variable = {
			name = variable_PDXCON_is_over
			value = yes
		}
		custom_tooltip = PDXCON.1400.after.tt
	}
	
}